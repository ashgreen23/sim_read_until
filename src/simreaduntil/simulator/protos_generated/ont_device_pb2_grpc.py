# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import simreaduntil.simulator.protos_generated.ont_device_pb2 as ont__device__pb2


class ONTDeviceStub(object):
    """control the readuntil simulator
    API calls: start/stop/mux_scan, perform_actions (unblock/stop_receiving), mk_run_dir, is_running, basecalled_chunks, action_results
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerInfo = channel.unary_unary(
                '/ontdevice.ONTDevice/GetServerInfo',
                request_serializer=ont__device__pb2.EmptyRequest.SerializeToString,
                response_deserializer=ont__device__pb2.ServerInfoResponse.FromString,
                )
        self.GetMKRunDir = channel.unary_unary(
                '/ontdevice.ONTDevice/GetMKRunDir',
                request_serializer=ont__device__pb2.EmptyRequest.SerializeToString,
                response_deserializer=ont__device__pb2.MKRunDirResponse.FromString,
                )
        self.PerformActions = channel.unary_unary(
                '/ontdevice.ONTDevice/PerformActions',
                request_serializer=ont__device__pb2.ReadActionsRequest.SerializeToString,
                response_deserializer=ont__device__pb2.EmptyResponse.FromString,
                )
        self.GetBasecalledChunks = channel.unary_stream(
                '/ontdevice.ONTDevice/GetBasecalledChunks',
                request_serializer=ont__device__pb2.BasecalledChunksRequest.SerializeToString,
                response_deserializer=ont__device__pb2.BasecalledReadChunkResponse.FromString,
                )
        self.GetActionResults = channel.unary_stream(
                '/ontdevice.ONTDevice/GetActionResults',
                request_serializer=ont__device__pb2.ActionResultsRequest.SerializeToString,
                response_deserializer=ont__device__pb2.ActionResultResponse.FromString,
                )
        self.StartSim = channel.unary_unary(
                '/ontdevice.ONTDevice/StartSim',
                request_serializer=ont__device__pb2.StartRequest.SerializeToString,
                response_deserializer=ont__device__pb2.BoolResponse.FromString,
                )
        self.StopSim = channel.unary_unary(
                '/ontdevice.ONTDevice/StopSim',
                request_serializer=ont__device__pb2.EmptyRequest.SerializeToString,
                response_deserializer=ont__device__pb2.BoolResponse.FromString,
                )
        self.RunMuxScan = channel.unary_unary(
                '/ontdevice.ONTDevice/RunMuxScan',
                request_serializer=ont__device__pb2.RunMuxScanRequest.SerializeToString,
                response_deserializer=ont__device__pb2.RunMuxScanResponse.FromString,
                )
        self.IsRunning = channel.unary_unary(
                '/ontdevice.ONTDevice/IsRunning',
                request_serializer=ont__device__pb2.EmptyRequest.SerializeToString,
                response_deserializer=ont__device__pb2.BoolResponse.FromString,
                )
        self.GetDeviceInfo = channel.unary_unary(
                '/ontdevice.ONTDevice/GetDeviceInfo',
                request_serializer=ont__device__pb2.EmptyRequest.SerializeToString,
                response_deserializer=ont__device__pb2.DeviceInfoResponse.FromString,
                )


class ONTDeviceServicer(object):
    """control the readuntil simulator
    API calls: start/stop/mux_scan, perform_actions (unblock/stop_receiving), mk_run_dir, is_running, basecalled_chunks, action_results
    """

    def GetServerInfo(self, request, context):
        """any information that should be attached to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMKRunDir(self, request, context):
        """return the current run dir where reads are written to
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformActions(self, request, context):
        """request actions to perform on channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBasecalledChunks(self, request, context):
        """get new chunks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActionResults(self, request, context):
        """get action results (only those that were not yet received)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartSim(self, request, context):
        """start simulation, returns whether it succeeded (i.e. if simulation was not running)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopSim(self, request, context):
        """stop simulation, returns whether it succeeded (i.e. if simulation was running)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunMuxScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsRunning(self, request, context):
        """whether simulation is running
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ONTDeviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerInfo,
                    request_deserializer=ont__device__pb2.EmptyRequest.FromString,
                    response_serializer=ont__device__pb2.ServerInfoResponse.SerializeToString,
            ),
            'GetMKRunDir': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMKRunDir,
                    request_deserializer=ont__device__pb2.EmptyRequest.FromString,
                    response_serializer=ont__device__pb2.MKRunDirResponse.SerializeToString,
            ),
            'PerformActions': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformActions,
                    request_deserializer=ont__device__pb2.ReadActionsRequest.FromString,
                    response_serializer=ont__device__pb2.EmptyResponse.SerializeToString,
            ),
            'GetBasecalledChunks': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBasecalledChunks,
                    request_deserializer=ont__device__pb2.BasecalledChunksRequest.FromString,
                    response_serializer=ont__device__pb2.BasecalledReadChunkResponse.SerializeToString,
            ),
            'GetActionResults': grpc.unary_stream_rpc_method_handler(
                    servicer.GetActionResults,
                    request_deserializer=ont__device__pb2.ActionResultsRequest.FromString,
                    response_serializer=ont__device__pb2.ActionResultResponse.SerializeToString,
            ),
            'StartSim': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSim,
                    request_deserializer=ont__device__pb2.StartRequest.FromString,
                    response_serializer=ont__device__pb2.BoolResponse.SerializeToString,
            ),
            'StopSim': grpc.unary_unary_rpc_method_handler(
                    servicer.StopSim,
                    request_deserializer=ont__device__pb2.EmptyRequest.FromString,
                    response_serializer=ont__device__pb2.BoolResponse.SerializeToString,
            ),
            'RunMuxScan': grpc.unary_unary_rpc_method_handler(
                    servicer.RunMuxScan,
                    request_deserializer=ont__device__pb2.RunMuxScanRequest.FromString,
                    response_serializer=ont__device__pb2.RunMuxScanResponse.SerializeToString,
            ),
            'IsRunning': grpc.unary_unary_rpc_method_handler(
                    servicer.IsRunning,
                    request_deserializer=ont__device__pb2.EmptyRequest.FromString,
                    response_serializer=ont__device__pb2.BoolResponse.SerializeToString,
            ),
            'GetDeviceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceInfo,
                    request_deserializer=ont__device__pb2.EmptyRequest.FromString,
                    response_serializer=ont__device__pb2.DeviceInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ontdevice.ONTDevice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ONTDevice(object):
    """control the readuntil simulator
    API calls: start/stop/mux_scan, perform_actions (unblock/stop_receiving), mk_run_dir, is_running, basecalled_chunks, action_results
    """

    @staticmethod
    def GetServerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/GetServerInfo',
            ont__device__pb2.EmptyRequest.SerializeToString,
            ont__device__pb2.ServerInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMKRunDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/GetMKRunDir',
            ont__device__pb2.EmptyRequest.SerializeToString,
            ont__device__pb2.MKRunDirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/PerformActions',
            ont__device__pb2.ReadActionsRequest.SerializeToString,
            ont__device__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBasecalledChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ontdevice.ONTDevice/GetBasecalledChunks',
            ont__device__pb2.BasecalledChunksRequest.SerializeToString,
            ont__device__pb2.BasecalledReadChunkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActionResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ontdevice.ONTDevice/GetActionResults',
            ont__device__pb2.ActionResultsRequest.SerializeToString,
            ont__device__pb2.ActionResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartSim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/StartSim',
            ont__device__pb2.StartRequest.SerializeToString,
            ont__device__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopSim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/StopSim',
            ont__device__pb2.EmptyRequest.SerializeToString,
            ont__device__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunMuxScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/RunMuxScan',
            ont__device__pb2.RunMuxScanRequest.SerializeToString,
            ont__device__pb2.RunMuxScanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsRunning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/IsRunning',
            ont__device__pb2.EmptyRequest.SerializeToString,
            ont__device__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeviceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ontdevice.ONTDevice/GetDeviceInfo',
            ont__device__pb2.EmptyRequest.SerializeToString,
            ont__device__pb2.DeviceInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
